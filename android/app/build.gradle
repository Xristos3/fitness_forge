def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {import 'package:flutter/material.dart';
    import 'package:firebase_auth/firebase_auth.dart';
    import 'package:cloud_firestore/cloud_firestore.dart';

    class ForgotPasswordScreen extends StatelessWidget {
        final TextEditingController usernameController = TextEditingController();

        @override
        Widget build(BuildContext context) {
            return Scaffold(
                    appBar: AppBar(
                            title: Text('Forgot Password'),
                    ),
                    body: Padding(
                            padding: EdgeInsets.all(16.0),
                            child: Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                            TextField(
                                                    controller: usernameController,
                                                    decoration: InputDecoration(
                                                            labelText: 'Username',
                                                    ),
                                            ),
                                            SizedBox(height: 16.0),
                                            ElevatedButton(
                                                    onPressed: () {
                                                        resetPassword(context, usernameController.text);
                                                    },
                                                    child: Text('Reset Password'),
                                            ),
                                    ],
                            ),
                    ),
            );
        }

        Future<void> resetPassword(BuildContext context, String username) async {
            try {
                final userRef = FirebaseFirestore.instance.collection('users');
                final querySnapshot = await userRef.where('username', isEqualTo: username).get();

                if (querySnapshot.docs.isNotEmpty) {
                    final userDoc = querySnapshot.docs.first;
                    final email = userDoc['email'] as String;

                    await FirebaseAuth.instance.sendPasswordResetEmail(email: email);

                    showDialog(
                            context: context,
                            builder: (BuildContext context) {
                        return AlertDialog(
                                title: Text('Password Reset'),
                                content: Text('A password reset email has been sent to the email address associated with $username.'),
                                actions: [
                                        TextButton(
                                                onPressed: () {
                                                    Navigator.pop(context);
                                                    Navigator.pop(context); // Pop ForgotPasswordScreen
                                                },
                                                child: Text('OK'),
                                        ),
                                ],
                        );
                    },
                    );
                } else {
                    showDialog(
                            context: context,
                            builder: (BuildContext context) {
                        return AlertDialog(
                                title: Text('User not found'),
                                content: Text('The provided username does not exist.'),
                                actions: [
                                        TextButton(
                                                onPressed: () {
                                                    Navigator.pop(context);
                                                },
                                                child: Text('OK'),
                                        ),
                                ],
                        );
                    },
                    );
                }
            } catch (e) {
                showDialog(
                        context: context,
                        builder: (BuildContext context) {
                    return AlertDialog(
                            title: Text('Password Reset Failed'),
                            content: Text(e.toString()),
                            actions: [
                                    TextButton(
                                            onPressed: () {
                                                Navigator.pop(context);
                                            },
                                            child: Text('OK'),
                                    ),
                            ],
                    );
                },
                );
            }
        }
    }

    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.fitness_forge"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 19
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
